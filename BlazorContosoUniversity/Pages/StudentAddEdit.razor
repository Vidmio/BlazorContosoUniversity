@page "/StudentAddEdit/{Id:int}"
@using BlazorContosoUniversity.Data
@using Microsoft.EntityFrameworkCore
@inject NavigationManager NavigationManager
@inherits BlazorContosoUniversity.Shared.DBContextPage
<h3>@Title</h3>
<EditForm Model="@data" OnValidSubmit="Submit">
    <DataAnnotationsValidator />
    @*<div class="form-group">
        <label>Id</label>
        <InputNumber class="form-control" @bind-Value="data.ID" />
        <ValidationMessage For="() => data.ID" />
    </div>*@
    <div class="form-group">
        <label>Last Name</label>
        <InputText class="form-control" @bind-Value="data.LastName" />
        <ValidationMessage For="() => data.LastName" />
    </div>
    <div class="form-group">
        <label>First Mid Name</label>
        <InputText class="form-control" @bind-Value="data.FirstMidName" />
        <ValidationMessage For="() => data.FirstMidName" />
    </div>
    <div class="form-group">
        <label>Enrollment Date</label>
        <InputDate class="form-control" @bind-Value="data.EnrollmentDate" />
        <ValidationMessage For="() => data.EnrollmentDate" />
    </div>
    <div class="mb-3">
        <button type="submit" class="btn btn-primary">Save</button>
        <button type="button" class="btn btn-light" @onclick="Cancel">Cancel</button>
    </div>
</EditForm>
@code {
    [Parameter]
    public int Id { get; set; }
    protected string Title = "Add";
    Data.Student data = new Data.Student();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        if (Id != 0)
        {
            Title = "Edit";
            data = await Task.Run(() => dbContext.Students.FirstOrDefaultAsync(c => c.ID == Id));
        }
    }
    protected async Task Submit()
    {
        try
        {
            if (Id != 0)
            {
                dbContext.Students.Update(data);
            }
            else
            {
                await dbContext.Students.AddAsync(data);

            }
            await dbContext.SaveChangesAsync();
            NavigationManager.NavigateTo("Students");
        }
        catch
        {
            dbContext.Entry(data).State = EntityState.Detached;
            throw;
        }

    }
    void Cancel()
    {
        NavigationManager.NavigateTo("Students");

    }
}